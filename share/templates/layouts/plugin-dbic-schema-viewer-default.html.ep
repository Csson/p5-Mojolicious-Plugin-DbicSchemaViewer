<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>DbicSchemaViewer - <%= $schema_name %></title>
        %= bootstrap 'allq'
        <link rel="stylesheet" href="<%= url_for 'svg_css' %>" type="text/css" />
        <script>
            $(document).ready(function() {
                var $doc = $('svg');
                console.log($doc);

                $doc.find('g.edge').hover(function(e) {
                    var $this = $(this);
                    $this.addClass('hovered');
                    $this.appendTo($this.parent());
                    $this.css('cursor', 'pointer');
                });
                $doc.find('g.edge').mouseout(function(e) {
                    var $this = $(this);
                    if(!$this.data('clicked')) {
                        $this.removeClass('hovered');
                    }
                });
                $doc.find('g.edge').click(function(e) {
                    var $this = $(this);
                    if($this.data('clicked')) {
                        $this.data('clicked', 0);
                        $this.removeClass('hovered');
                    }
                    else {
                        $this.data('clicked', 1);
                    }
                });
                // Handle column name hovers
                $doc.find('polygon.column_name, text.column_name').mouseenter(function(e) {
                    var $selected = $(this);
                    var tagName = $selected.prop('tagName');
                    var $el = tagName === 'polygon' ? $selected.next('text.column_name') : $selected;
                    var $polygon = tagName === 'text' ? $selected.prev('polygon.column_name') : $selected;

                    // highlight
                    $polygon.addClass('hovered');

                    // show edges representing relationships from/to this column
                    var table = $el.parent().find('title').first().text();
                    var column = $el.text();

                    $doc.find('.edge').each(function(index) {
                        var $edge = $(this);
                        var edge_title = $edge.find('title:first').text();

                        if(possibly_highlight_relation(edge_title, table, column)) {
                            $edge.addClass('column_relations');
                            $edge.appendTo($edge.parent());
                            $edge.attr('data-highlighted-by', $el.parent().attr('id') + '_' + column);
                        }
                    });
                    if($doc.find('.node.related_table').size()) {
                        $doc.find('.node:not(.related_table):not(.hovered):not([id="' + $el.parent().attr('id') + '"])').addClass('faded');
                    }
                });
                $doc.find('polygon.column_name, text.column_name').mouseout(function(e) {
                    var $this = $(this).prop('tagName') === 'polygon' ? $(this).next('text.column_name') : $(this);
                    var $polygon = $this.prev('polygon.column_name');
                    if($this.data('clicked')) {
                        return;
                    }
                    $polygon.removeClass('hovered');
                    $doc.find('.edge[data-highlighted-by="' + $this.parent().attr('id') + '"]').removeClass('column_relations');
                    $doc.find('.node').removeClass('related_table').removeClass('faded');
                });
                $doc.find('polygon.column_name, text.column_name').click(function(e) {
                    var $this = $(this).prop('tagName') === 'polygon' ? $(this).next('text.column_name') : $(this);
                    if($this.data('clicked')) {
                        $this.data('clicked', 0);
                        $this.removeClass('hovered');
                    }
                    else {
                        $this.data('clicked', 1);
                    }
                });

                // Highlight all relations to/from a table when the table name cell is hovered.
                $doc.find('polygon.table_name, text.table_name').mouseenter(function(e) {
                    var $selected = $(this);
                    
                    // There can be more than one such polygon
                    $selected.parent().addClass('hovered');

                    var table = $selected.parent().find('text.table_name').text();
                    $selected.parent().find('text.column_name').each(function(i) {
                        var column = $(this).text();
                        
                        $doc.find('.edge title:contains("' + column + '")').each(function(j) {
                            var $edge = $(this).parent();
                            var edge_title = $edge.find('title:first').text();
                            console.log(edge_title, ',', table, ',', column);

                            if(possibly_highlight_relation(edge_title, table, column)) {
                                $edge.addClass('column_relations');
                                $edge.appendTo($edge.parent());
                            }
                        });
                    });
                    if($doc.find('.node.related_table').size()) {
                        $doc.find('.node:not(.related_table):not(.hovered)').addClass('faded');
                    }
                });
                $doc.find('polygon.table_name, text.table_name').mouseout(function(e) {
                    var $selected = $(this);

                    $selected.parent().removeClass('hovered');
                    $doc.find('.edge').removeClass('column_relations');
                    $doc.find('.node').removeClass('related_table').removeClass('faded');
                });

                $(document).keyup(function(e) {
                    // escape -> restore
                    console.log('keuup', e.keyCode);
                    if(e.keyCode == 27) {
                        $doc.find('.edge').removeClass('hovered').data('clicked', 0);
                        $doc.find('.node').removeClass('hovered').data('clicked', 0);
                        $doc.find('.text').removeClass('hovered').data('clicked', 0);
                    }
                });
            });

            function get_hovered_edge_id($el) {
                if($el.hasClass('hovered_edge')) {
                    return '#' + $el.attr('id');
                }
                else {
                    return '#hovered_' + $el.attr('id');
                }
            }
            function get_unhovered_edge_id($el) {
                var id = $el.attr('id');
                return '#' + id.replace(/^hovered_/, '');
            }
            function set_path_colors($el, color) {
                $el.find('path').attr({ 'stroke': color });
                $el.find('polyline').attr({ 'stroke': color, 'fill': color });
                $el.find('polygon').attr({ 'stroke': color, 'fill': color });
                $el.find('ellipse').attr({ 'stroke': color });
            }
            function possibly_highlight_relation(edge_title, table, column) {
                var matchFromStart = new RegExp('^' + table + '\.' + column + ' ');
                var matchFromEnd = new RegExp(' ' + table + '\.' + column + '$');

                var regex;
                var match;
                if(edge_title.match(matchFromStart)) {
                    regex = /^.* ([^.]+)/;
                }
                else if (edge_title.match(matchFromEnd)) {
                    regex = /^([^.]+)/;
                }
                else {
                    return 0;
                }
                match = regex.exec(edge_title);
                if(undefined === match) {
                    return 0;
                }
                var otherTableName = match[1];

                $('text:contains("' + otherTableName + '")').each(function(index) {
                    var $otherTableTitle = $(this);
                    // :contains is not enough, it must match exactly
                    if($otherTableTitle.text() !== otherTableName) {
                        return 0;
                    }
                    $otherTableTitle.parent().addClass('related_table');
                });
                return 1;
            }
        </script>
    </head>
    <body>
        <%= navbar header => ['DbicSchemaViewer', ['#']],
                   container => 'normal',
                   nav => [
                    items => [
                        ['Overview', ['schema']],
                        ['Visualized', ['visualizer']]
                    ],
                   ]
        %>
        <%= content %>
    </body>
</html>
